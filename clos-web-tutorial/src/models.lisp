(in-package #:clos-web.models)

;;; ========================================
;;; EXERCISE 1: Basic Task Class
;;; ========================================
;;; 
;;; Your first task is to define a basic TASK class with the following slots:
;;; - id: a unique identifier (auto-generated)
;;; - title: the task title (required)
;;; - description: task description (optional)
;;; - status: current status (:pending, :in-progress, :completed)
;;; - created-at: timestamp when task was created
;;;
;;; TODO: Define the TASK class below
;;; HINT: Use defclass with appropriate slot options

;;; ========================================
;;; EXERCISE 2: Task Accessors
;;; ========================================
;;; 
;;; After defining the class, you'll need accessor functions to get and set
;;; slot values. These will be automatically generated by defclass.
;;;
;;; TODO: Find the test-basic-task function later in this file and implement it
;;; HINT: Use make-instance to create objects, slot-value or accessors to read slots
;;; HINT: The test function should create a task and display its properties

;;; ========================================
;;; EXERCISE 3: Generic Functions
;;; ========================================
;;; 
;;; Define generic functions that will work with any task type:
;;; - task-display-name: returns a formatted name for display
;;; - task-css-class: returns CSS class for styling
;;; - validate-task: validates task data
;;;
;;; TODO: Define these generic functions
;;; HINT: Use defgeneric to define the interface

;;; ========================================
;;; EXERCISE 4: Method Implementations
;;; ========================================
;;; 
;;; Implement methods for the generic functions:
;;; - task-display-name should return the title
;;; - task-css-class should return "task"
;;; - validate-task should check that title is not empty
;;;
;;; TODO: Implement these methods for the TASK class
;;; HINT: Use defmethod with the class name as the first parameter

;;; ========================================
;;; EXERCISE 5: Task Inheritance
;;; ========================================
;;; 
;;; Create specialized task types that inherit from TASK:
;;; - personal-task: adds priority slot (:low, :medium, :high)
;;; - work-task: adds deadline and assigned-to slots
;;; - urgent-task: high priority with escalation time
;;;
;;; TODO: Define these subclasses
;;; HINT: Use defclass with :superclass option

;;; ========================================
;;; EXERCISE 6: Polymorphic Behavior
;;; ========================================
;;; 
;;; Implement different behaviors for different task types:
;;; - personal-task: display-name includes priority
;;; - work-task: display-name includes deadline
;;; - urgent-task: css-class includes "urgent"
;;;
;;; TODO: Implement specialized methods for each task type
;;; HINT: Use defmethod with the specific class names

;;; ========================================
;;; EXERCISE 7: Method Combinations
;;; ========================================
;;; 
;;; Add logging and validation using method combinations:
;;; - save-task: saves task with logging
;;; - validate-task: adds cross-cutting validation
;;;
;;; TODO: Implement method combinations
;;; HINT: Use :method-combination :around and :before/:after methods

;;; ========================================
;;; EXERCISE 8: Task Registry
;;; ========================================
;;; 
;;; Create a singleton task registry to store all tasks:
;;; - task-registry: singleton class to manage tasks
;;; - add-task, remove-task, get-task, get-all-tasks methods
;;;
;;; TODO: Implement the task registry
;;; HINT: Use a class with a single instance and class slots

;;; ========================================
;;; EXERCISE 9: JSON Serialization
;;; ========================================
;;; 
;;; Add JSON serialization for tasks:
;;; - task-to-json: converts task to JSON string
;;; - json-to-task: creates task from JSON
;;;
;;; TODO: Implement JSON serialization
;;; HINT: Use cl-json library functions

;;; ========================================
;;; EXERCISE 10: HTML Generation
;;; ========================================
;;; 
;;; Generate HTML representation of tasks:
;;; - task-to-html: converts task to HTML string
;;; - render-task-list: renders list of tasks
;;;
;;; TODO: Implement HTML generation
;;; HINT: Use CL-WHO for HTML generation

;;; ========================================
;;; HELPER FUNCTIONS (Provided)
;;; ========================================
;;; Note: generate-id and current-timestamp are imported from clos-web.utils
;;; format-date is also available from clos-web.utils for formatting timestamps

;;; ========================================
;;; TESTING FUNCTIONS (For Development)
;;; ========================================

(defun test-basic-task ()
  "Test creating and accessing a basic task"
  (format t "~%=== Testing Basic Task ===~%")
  ;; TODO: Add your test code here
  )

(defun test-task-inheritance ()
  "Test task inheritance and polymorphic behavior"
  (format t "~%=== Testing Task Inheritance ===~%")
  ;; TODO: Add your test code here
  )

(defun test-task-registry ()
  "Test task registry functionality"
  (format t "~%=== Testing Task Registry ===~%")
  ;; TODO: Add your test code here
  )

(defun run-all-tests ()
  "Run all CLOS tests"
  (test-basic-task)
  (test-task-inheritance)
  (test-task-registry)
  (format t "~%=== All Tests Complete ===~%"))

#+TITLE: Common Lisp Tutorial Project: CLOS Web Application
#+AUTHOR: Your Name
#+STARTUP: showall

* Overview

This tutorial teaches **Common Lisp Object System (CLOS)** by building a task management web application. You'll learn CLOS concepts progressively through hands-on exercises, starting with basic classes and ending with a complete web application.

* What You'll Learn

**CLOS Fundamentals:**
- Class definitions and inheritance
- Generic functions and methods
- Polymorphic behavior
- Method combinations
- Object persistence

**Web Development:**
- Web server setup with Hunchentoot
- HTML generation with CL-WHO
- Form handling and validation
- Session management
- Testing web applications

* What You'll Build

A task management web application that allows users to:
- Create, view, edit, and delete tasks
- Organize tasks by type (Personal, Work, Urgent)
- Manage task priorities and deadlines
- View tasks in a responsive web interface

* Quick Start

**New to this tutorial?** Start here:
- [[file:getting-started.org][Getting Started Guide]] - Quick start instructions
- [[file:exercise-guide.org][Exercise Guide]] - Detailed exercise walkthrough

**Ready to begin?**
1. Load the project: `(ql:quickload :clos-web)`
2. Open `src/models.lisp` and start with Exercise 1
3. Follow the TODO instructions in each exercise

* Tutorial Structure

The tutorial is organized into **20 progressive exercises**:

**Phase 1: CLOS Fundamentals (Exercises 1-10)**
- Exercise 1: Basic Task Class ← **Start Here**
- Exercise 2: Task Accessors
- Exercise 3: Generic Functions
- Exercise 4: Method Implementations
- Exercise 5: Task Inheritance
- Exercise 6: Polymorphic Behavior
- Exercise 7: Method Combinations
- Exercise 8: Task Registry
- Exercise 9: JSON Serialization
- Exercise 10: HTML Generation

**Phase 2: Web Integration (Exercises 11-20)**
- Exercise 11: Web Server Setup
- Exercise 12: Route Definitions
- Exercise 13: Request Handling
- Exercise 14: Session Management
- Exercise 15: Error Handling
- Exercise 16: Basic HTML Generation
- Exercise 17: Task List View
- Exercise 18: Task Form View
- Exercise 19: Task Detail View
- Exercise 20: Layout and Styling

* Prerequisites

**Required:**
- Basic Common Lisp knowledge (syntax, functions, packages)
- Quicklisp package manager
- Emacs + SLY development environment
- SBCL or another Common Lisp implementation

**Recommended:**
- Completion of the CSV Report tutorial (for project structure)
- Completion of the Testing tutorial (for testing practices)

* Project Structure

#+begin_example
clos-web-tutorial/
├── README.org                 ;; This file
├── getting-started.org        ;; Quick start guide
├── exercise-guide.org         ;; Detailed exercise guide
├── clos-web.asd              ;; ASDF system definition
├── package.lisp              ;; Package definitions
├── src/                      ;; Source code with exercises
│   ├── models.lisp           ;; CLOS exercises (start here)
│   ├── web-server.lisp       ;; Web server exercises
│   ├── views.lisp            ;; HTML generation exercises
│   └── utils.lisp            ;; Helper functions
├── solutions/                 ;; Reference solutions
│   └── models-solution.lisp  ;; Completed CLOS implementations
├── static/                   ;; Static assets
│   └── css/
│       └── style.css         ;; Application styles
└── tests/                    ;; Test files (future)
#+end_example

* How to Work Through the Tutorial

1. **Read the exercise description** in the source files
2. **Implement the TODO items** in each exercise
3. **Test your implementation** using the provided test functions
4. **Move to the next exercise** when the current one works

**Example Exercise:**
#+begin_src lisp
;;; EXERCISE 1: Basic Task Class
;;; 
;;; Your first task is to define a basic TASK class with the following slots:
;;; - id: a unique identifier (auto-generated)
;;; - title: the task title (required)
;;; - description: task description (optional)
;;; - status: current status (:pending, :in-progress, :completed)
;;; - created-at: timestamp when task was created
;;;
;;; TODO: Define the TASK class below
;;; HINT: Use defclass with appropriate slot options
#+end_src

* Testing Your Work

Each exercise includes test functions. Run them to verify your implementation:

#+begin_src lisp
;; Load the system
(ql:quickload :clos-web)

;; Test CLOS functionality
(clos-web.models:test-basic-task)
(clos-web.models:test-task-inheritance)
(clos-web.models:test-task-registry)
(clos-web.models:run-all-tests)

;; Test web functionality (after completing web exercises)
(clos-web.web:run-web-tests)

;; Test view functionality (after completing view exercises)
(clos-web.views:run-view-tests)
#+end_src

**⚠️ Important REPL Package Note:**

When working in the REPL, you need to be aware of **package symbols**. The tutorial uses multiple packages:
- `clos-web.models` - Contains the `task` class and related functions
- `clos-web.web` - Contains web server functions
- `clos-web.views` - Contains HTML generation functions

**If you get a `CLASS-NOT-FOUND-ERROR` or `UNBOUND-FUNCTION` error:**

1. **Use fully qualified names** from `CL-USER`:
   #+begin_src lisp
   ;; From CL-USER package
   (defvar my-task (make-instance 'clos-web.models:task 
                                  :title "Test Task"
                                  :description "Testing CLOS"))
   #+end_src

2. **Or switch to the appropriate package:**
   #+begin_src lisp
   ;; Switch to the models package for CLOS exercises
   (in-package #:clos-web.models)
   (defvar my-task (make-instance 'task 
                                  :title "Test Task" 
                                  :description "Testing CLOS"))
   #+end_src

3. **Or import specific symbols:**
   #+begin_src lisp
   ;; Import task class into CL-USER
   (import 'clos-web.models:task)
   (defvar my-task (make-instance 'task 
                                  :title "Test Task"
                                  :description "Testing CLOS"))
   #+end_src

**Recommended approach:** Switch to `clos-web.models` package when working on CLOS exercises!

* Getting Help

If you get stuck:

1. **Check the hints** in each exercise
2. **Look at the helper functions** provided
3. **Reference the solutions** in `solutions/models-solution.lisp`
4. **Use the REPL** to experiment with your code
5. **Check Common Lisp documentation**

* Development Workflow

1. **Edit the source files** in Emacs
2. **Compile your changes** with `C-c C-k`
3. **Test in the REPL** with the test functions
4. **Iterate** until it works
5. **Move to the next exercise**

* Running the Final Application

After completing all exercises, you can run the web application:

#+begin_src lisp
;; Load the system
(ql:quickload :clos-web)

;; Start the web server
(clos-web:start-server)

;; Open your browser to http://localhost:8080

;; Stop the server when done
(clos-web:stop-server)
#+end_src

* Dependencies

The tutorial automatically installs these libraries via Quicklisp:
- **Hunchentoot** - Web server
- **CL-WHO** - HTML generation
- **CL-JSON** - JSON serialization
- **Alexandria** - Utility functions

* Learning Outcomes

By the end of this tutorial, you'll understand:

- **CLOS Classes**: Defining classes with slots and inheritance
- **Generic Functions**: Creating polymorphic interfaces
- **Method Combinations**: Advanced CLOS features like :around and :before methods
- **Object Persistence**: Storing and retrieving objects
- **Web Development**: Building web applications with CLOS
- **Testing**: Writing tests for CLOS code
- **Project Organization**: Structuring CLOS applications

* Next Steps

After completing this tutorial, you can:

- Extend the application with database integration
- Add user authentication and authorization
- Implement real-time updates with WebSockets
- Create RESTful API endpoints
- Add mobile-responsive design
- Explore other CLOS features like the Metaobject Protocol

* Contributing

This tutorial is designed to be a living document. If you find errors, have suggestions, or want to add new content:

- **Open an issue** to discuss changes or report problems
- **Submit a pull request** with improvements
- **Share your experience** - what worked well, what was confusing?

* References

**CLOS Resources:**
- "Object-Oriented Programming in Common Lisp" by Sonya E. Keene
- "Practical Common Lisp" by Peter Seibel (CLOS chapters): https://gigamonkeys.com/book/
- Common Lisp HyperSpec (CLOS section): http://www.lispworks.com/documentation/HyperSpec/Front/
- Common Lisp Cookbook - CLOS: https://lispcookbook.github.io/cl-cookbook/clos.html

**Web Development Resources:**
- Hunchentoot documentation and examples: https://edicl.github.io/hunchentoot/
- CL-WHO tutorial and reference: https://edicl.github.io/cl-who/
- Common Lisp web development community: https://lispcookbook.github.io/cl-cookbook/web.html
- Common Lisp Cookbook - Web Development: https://lispcookbook.github.io/cl-cookbook/web.html

**General Common Lisp Resources:**
- Common Lisp Cookbook: https://lispcookbook.github.io/cl-cookbook/
- Quicklisp: https://www.quicklisp.org/beta/
- SLY (Superior Lisp Interaction Mode): https://github.com/joaotavora/sly
- Common Lisp Quick Reference: https://lispcookbook.github.io/cl-cookbook/quickref.html

* License

This tutorial is provided as-is for educational purposes. Feel free to use, modify, and distribute according to your needs. 

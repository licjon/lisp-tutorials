#+TITLE: CLOS Web Tutorial - Exercise Guide
#+AUTHOR: Your Name
#+STARTUP: showall

* Getting Started with CLOS Web Tutorial

This guide will walk you through building a task management web application using Common Lisp Object System (CLOS). You'll learn CLOS concepts progressively while building a real web application.

* Prerequisites

Before starting this tutorial, you should have:

- Basic Common Lisp knowledge (syntax, functions, packages)
- Quicklisp installed and configured
- Emacs + SLY development environment
- SBCL or another Common Lisp implementation

* Project Structure

The tutorial is organized into progressive exercises:

** Phase 1: CLOS Fundamentals (Exercises 1-10)**
- Basic class definitions and inheritance
- Generic functions and methods
- Polymorphic behavior
- Method combinations
- Object persistence

** Phase 2: Web Integration (Exercises 11-20)**
- Web server setup with Hunchentoot
- HTML generation with CL-WHO
- Form handling and validation
- Session management

* How to Work Through the Exercises

1. **Read the exercise description** in the source files
2. **Implement the TODO items** in each exercise
3. **Test your implementation** using the provided test functions
4. **Move to the next exercise** when the current one works

* Exercise 1: Basic Task Class

**Goal**: Define a basic TASK class with slots for task properties.

**What to do**:
1. Open `src/models.lisp`
2. Find Exercise 1 section
3. Define a TASK class with these slots:
   - id: unique identifier (auto-generated)
   - title: task title (required)
   - description: task description (optional)
   - status: current status (:pending, :in-progress, :completed)
   - created-at: timestamp when created

**Example**:
#+begin_src lisp
(defclass task ()
  ((id :initform (generate-id) :accessor task-id)
   (title :initarg :title :accessor task-title)
   (description :initarg :description :accessor task-description)
   (status :initform :pending :accessor task-status)
   (created-at :initform (get-universal-time) :accessor task-created-at)))
#+end_src

**Note**: The `generate-id` function is already imported from the utils package, so you can use it directly. However, you'll need to export your new task class and its accessors from the package. Update your `package.lisp` to include the task class and all its accessors in the exports:

#+begin_src lisp
(defpackage #:clos-web.models
  (:use #:cl)
  (:import-from #:clos-web.utils #:generate-id #:current-timestamp #:format-date)
  (:nicknames #:cwm)
  (:export #:task              ; Export the class name
           #:task-id           ; Export the accessor
           #:task-title        ; Export the accessor
           #:task-description  ; Export the accessor
           #:task-status       ; Export the accessor
           #:task-created-at   ; Export the accessor
           #:test-basic-task)) ; Export the test function
#+end_src

This exports both the class name and all its accessors, making them available to other packages that use this one.

**Test it**:
#+begin_src lisp
(ql:quickload :clos-web)
(clos-web.models:test-basic-task)
#+end_src

**Note**: At this point, `test-basic-task` should return `nil` because the test function implementation comes in Exercise 2. The class definition should work, but the test function itself is not yet implemented.

* Exercise 2: Task Accessors

**Goal**: Implement the test function to create and access task objects.

**What to do**:
1. Open `src/models.lisp` and find the `test-basic-task` function
2. Implement the function to create a task using `make-instance`
3. Test accessing slot values using accessors
4. Add output to verify the task was created correctly

**Example**:
#+begin_src lisp
(defun test-basic-task ()
  "Test creating and accessing a basic task"
  (format t "~%=== Testing Basic Task ===~%")
  (let ((task (make-instance 'task 
                             :title "Learn CLOS"
                             :description "Study Common Lisp Object System")))
    (format t "Task: ~A~%" (task-title task))
    (format t "Status: ~A~%" (task-status task))
    (format t "ID: ~A~%" (task-id task))
    (format t "Created: ~A~%" (task-created-at task))))
#+end_src

* Exercise 3: Generic Functions

**Goal**: Define generic functions for task operations.

**What to do**:
1. Define `task-display-name` generic function
2. Define `task-css-class` generic function (returns CSS class names for HTML styling)
3. Define `validate-task` generic function

**Example** (for `task-display-name`):
#+begin_src lisp
(defgeneric task-display-name (task)
  (:documentation "Return a user-friendly display name for the task"))
#+end_src

**Note**: Generic functions define the interface for operations that can work with different types of objects. They specify what arguments the function takes and provide documentation. Use `defgeneric` with appropriate documentation strings for the other two functions.

* Exercise 4: Method Implementations

**Goal**: Implement methods for the generic functions.

**What to do**:
1. Implement `task-display-name` method for TASK class
2. Implement `task-css-class` method for TASK class
3. Implement `validate-task` method for TASK class

**Example** (for `task-display-name`):
#+begin_src lisp
(defmethod task-display-name ((task task))
  "Return a formatted display name for the task"
  (format nil "~A (~A)" (task-title task) (task-status task)))
#+end_src

**Note**: Methods implement the behavior for specific classes. 

For `task-css-class`: Return a string of CSS class names (literal strings, not task objects). For this exercise, you're only implementing the method for the basic `task` class, so just return `"task"`. In Exercise 6, you'll learn how different task types return different class names.

**Example for `task-css-class`**:
#+begin_src lisp
(defmethod task-css-class ((task task))
  "task")  ; Returns the literal string "task" for basic tasks
#+end_src

For `validate-task`: Check that the task has the minimum required data to be valid. At minimum, check that the task has a title and that the title is not empty. Return `T` if the task is valid, `NIL` if invalid.

**Example for `validate-task`**:
#+begin_src lisp
(defmethod validate-task ((task task))
  (and (task-title task)                    ; Title exists
       (> (length (task-title task)) 0)))   ; Title is not empty
#+end_src

* Exercise 5: Task Inheritance

**Goal**: Create specialized task types that inherit from TASK.

**What to do**:
1. Define `personal-task` class with priority slot
2. Define `work-task` class with deadline and assigned-to slots
3. Define `urgent-task` class with high priority and escalation time

**Note**: Use what you learned from Exercise 1 to define these classes. To inherit from the TASK class, put the superclass name in parentheses after your class name: `(defclass personal-task (task) ...)`. The `(task)` is a list of superclasses - you can inherit from multiple classes by listing them all.

* Exercise 6: Polymorphic Behavior

**Goal**: Implement different behaviors for different task types.

**What to do**:
1. Implement specialized `task-display-name` methods
2. Implement specialized `task-css-class` methods
3. Test polymorphic behavior

**Note**: The `task-css-class` function returns a string of CSS class names that will be applied to HTML elements when displaying tasks in the web interface. For example:
- A basic task might return "task pending-task"
- An urgent task might return "task urgent-task high-priority"
- A completed task might return "task completed-task"

These class names correspond to CSS rules in your stylesheet for different visual styling (colors, fonts, etc.).

* Exercise 7: Method Combinations

**Goal**: Add logging and validation using method combinations.

**What to do**:
1. Define `save-task` with `:around` method combination
2. Add logging before and after saving
3. Add validation using `:before` methods

**Note**: Method combinations allow you to control the order and behavior of multiple methods. `:around` methods wrap the entire method call, while `:before` methods run before the primary method.

* Exercise 8: Task Registry

**Goal**: Create a singleton task registry to manage all tasks.

**What to do**:
1. Define `task-registry` class with class slots
2. Implement `add-task`, `remove-task`, `get-task` methods
3. Create a singleton instance

**Note**: Use `:allocation :class` to create class slots that are shared across all instances. A singleton pattern ensures only one registry exists.

* Exercise 9: JSON Serialization

**Goal**: Add JSON serialization for tasks.

**What to do**:
1. Implement `task-to-json` method
2. Implement `json-to-task` function
3. Test serialization and deserialization

**Note**: Use the `cl-json` library to convert task objects to and from JSON format for web API communication.

* Exercise 10: HTML Generation

**Goal**: Generate HTML representation of tasks.

**What to do**:
1. Implement `task-to-html` method
2. Use CL-WHO for HTML generation
3. Test HTML output

**Note**: CL-WHO provides a Lisp-like syntax for generating HTML. Use the `task-css-class` method to apply appropriate styling classes.

* Web Integration Exercises (11-20)

After completing the CLOS fundamentals, you'll move on to web integration:

- **Exercise 11**: Web server setup with Hunchentoot
- **Exercise 12**: Route definitions for task management
- **Exercise 13**: Request handling and form processing
- **Exercise 14**: Session management
- **Exercise 15**: Error handling
- **Exercise 16**: Basic HTML generation with CL-WHO
- **Exercise 17**: Task list view
- **Exercise 18**: Task form view
- **Exercise 19**: Task detail view
- **Exercise 20**: Layout and styling

* Testing Your Work

Each exercise includes test functions. Run them to verify your implementation:

#+begin_src lisp
;; Load the system
(ql:quickload :clos-web)

;; Run CLOS tests
(clos-web.models:run-all-tests)

;; Run web tests (after completing web exercises)
(clos-web.web:run-web-tests)

;; Run view tests (after completing view exercises)
(clos-web.views:run-view-tests)
#+end_src

* Getting Help

If you get stuck:

1. **Check the hints** in each exercise
2. **Look at the helper functions** provided
3. **Test incrementally** - don't wait until the end
4. **Use the REPL** to experiment with your code
5. **Check Common Lisp documentation** for function details

* Next Steps

After completing all exercises, you'll have:

- A working task management web application
- Understanding of CLOS concepts and patterns
- Experience with web development in Common Lisp
- Knowledge of testing and debugging techniques

You can then extend the application with additional features like:
- Database integration
- User authentication
- Real-time updates
- Mobile responsiveness
- API endpoints

* Happy Coding!

Remember: CLOS is powerful but takes practice. Don't worry if you don't understand everything immediately. The key is to experiment and build incrementally. 